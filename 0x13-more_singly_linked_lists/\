#include "lists.h"
/**
 * print_listint_safe - prints a listint_t linked list, avoiding loops
 * @head: pointer to the head of the linked list
 *
 * Return: the number of nodes in the list
 */
size_t print_listint_safe(const listint_t *head)
{
	const listint_t *tortoise = head, *hare = head;
	size_t count = 0, i;

	while (tortoise != NULL && hare != NULL && hare->next != NULL)
	{
		tortoise = tortoise->next;
		hare = hare->next->next;

		if (tortoise == hare)
		{
			printf("-> [%p] %d\n", (void *)tortoise, tortoise->n);
			count++;
			for (i = 0; head != hare; i++)
			{
				printf("[%p] %d\n", (void *)head, head->n);
				count++;
				head = head->next;
				hare = hare->next;
			}
			printf("[%p] %d\n", (void *)head, head->n);
			count++;
			printf("-> [%p] %d\n", (void *)tortoise, tortoise->n);
			break;
		}
		printf("[%p] %d\n", (void *)tortoise, tortoise->n);
		count++;
	}
	if (tortoise == NULL || hare == NULL || hare->next == NULL)
	{
		for (; head != NULL; count++)
		{
			printf("[%p] %d\n", (void *)head, head->n);
			head = head->next;
		}
	}
}
{
	return (count);
}
